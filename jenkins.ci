node {
    try {
        stage('Preparation') {
        build 'docker-remove-all-images'
        checkout([$class: 'GitSCM', branches: [[name: '**']], browser: [$class: 'GithubWeb', repoUrl: 'https://github.com/pozgo/docker-teamspeak.git'], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '4e21ba1d-d489-4e42-a106-7d774b931942', url: 'https://github.com/pozgo/docker-teamspeak.git']]])
        }
        stage('Build') {
            sh label: 'build', script: '''echo; echo;
            git status
RELEASE=$(grep "TS3_VERSION=" Dockerfile | sed \'s|^.*=||g\' |awk \'{print $1}\'); docker build -t polinux/teamspeak:$RELEASE .
docker build -t polinux/teamspeak:latest .
echo; echo;'''
        }
        stage('Test Image') {
            sh label: 'test', script: '''echo; echo;
RELEASE=$(grep "TS3_VERSION=" Dockerfile | sed \'s|^.*=||g\' |awk \'{print $1}\'); docker run -d -p 9987:9987/udp -p 10011:10011 -p 30033:30033 --name ts3 polinux/teamspeak:$RELEASE
end=$(date -ud "1 minute" +%s)
while [[ $(date -u +%s) -le $end ]]; do if docker logs ts3 | grep "listening on 0.0.0.0"; then break; else sleep 2; fi done
echo; echo;'''
        }
        stage("Release Image") {
            if(env.gitbranch == 'origin/master'){
              sh label: 'releaser image to public', script: '''echo; echo;
docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
RELEASE=$(grep "TS3_VERSION=" Dockerfile | sed 's|^.*=||g' |awk '{print $1}')
docker push polinux/teamspeak:$RELEASE
docker push polinux/teamspeak:latest
echo; echo;'''
            }
            else {
                echo "Image not Released"
            }
        }
        stage("Clean after all stages") {
            build 'docker-remove-all-images'
        }
    } catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    // if ($env.CHANGE_ID!=NULL) {
    //   ghStatus.result = "FAILURE"
    // }
    throw e
  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
    // if ($env.CHANGE_ID!=NULL) {
    //   prNotify(ghStatus.result)
    // }
  }
}

// def prNotify(String ghStatus = 'SUCCESS') {
//   ghStatus = ghStatus ?: 'SUCCESS'
//   setGitHubPullRequestStatus context: 'continuous-integration/jenkins', message: ghStatus, state: ghStatus
// }

// Slack messenger
def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)
  if (env.CHANGE_ID) {
    // Run only if PR
    if (buildStatus == 'SUCCESSFUL') {
      buildStatus = 'SUCCESS'
    } else if (buildStatus == 'FAILED') {
      buildStatus = 'FAILURE'
    }
    setGitHubPullRequestStatus context: 'continuous-integration/jenkins', message: buildStatus, state: buildStatus
  }
}
